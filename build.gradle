plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.5'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    implementation 'org.postgresql:postgresql:42.3.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.5.5'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.5'
    implementation 'org.liquibase:liquibase-core:4.5.0'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.0'
    annotationProcessor group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.1'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    annotationProcessor 'io.rest-assured:rest-assured:4.4.0'

}

test {
    useJUnitPlatform()
}

task stage(dependsOn: ['bootJar'])

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.jar") //delete everything except jar file inside build folder
}

tasks {
    test{
        dependsOn checkstyleMain
        dependsOn checkstyleTest
    }
}

jar { //Don't package test folders and files
    exclude "test/**"
    exclude "test/**/**"
}

build.mustRunAfter clean //First clean then build to avoid cache issues etc

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) { //Don't run test on heroku
            test.enabled = false
        }
}

bootJar { //Exclude test files when pack boot jar file
    enabled = true
    classifier = 'boot'
    exclude "test/**"
    exclude "test/**/**"
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}